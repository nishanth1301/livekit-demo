{"ast":null,"code":"var _jsxFileName = \"/home/nishanth/projects/livekit-demo/src/component/ChatBot.tsx\",\n  _s = $RefreshSig$();\nimport \"@livekit/components-styles\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const serverUrl = \"wss://randomroom-f0bn812z.livekit.cloud\";\nconst serverUrl = \"ws://192.168.0.41:7880\";\nfunction ChatBot({\n  roomName,\n  participantName\n}) {\n  _s();\n  const [token, setToken] = useState(null);\n  // const room = RoomContext\n  // const roomRef = useRef < Room > new Room();\n  const [messageInput, setMessageInput] = useState(\"\");\n  useEffect(() => {\n    const fetchToken = async () => {\n      try {\n        const response = await axios.post(\"http://192.168.0.41:3002/livekit/tokenGenerate\", {\n          roomName,\n          participantName\n        });\n        if (response.data.token) {\n          console.log(\"Token received:\", response.data.token);\n          setToken(response.data.token);\n        } else {\n          console.error(\"Token response did not contain a token:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching token:\", error);\n      }\n    };\n    fetchToken();\n  }, [roomName, participantName]);\n\n  // useEffect(() => {\n  //   if (room) {\n  //     room.on(\"dataReceived\", (payload, participant) => {\n  //       const newMessage = {\n  //         sender: participant.identity,\n  //         content: new TextDecoder().decode(payload),\n  //       };\n  //       setMessages((prevMessages) => [...prevMessages, newMessage]);\n  //     });\n  //   }\n  // }, [room]);\n\n  // const handleSendMessage = () => {\n  //   console.log(room);\n  //   if (room && messageInput.trim()) {\n  //     try {\n  //       room.localParticipant.publishData(messageInput, \"message\");\n  //       setMessages((prevMessages) => [\n  //         ...prevMessages,\n  //         { sender: participantName, content: messageInput },\n  //       ]);\n  //       setMessageInput(\"\");\n  //     } catch (error) {\n  //       console.error(\"Error sending message:\", error);\n  //     }\n  //   }\n  // };\n\n  if (token) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"kuhiiugig\"\n    }, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      flexDirection: \"column\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"10px\",\n        borderTop: \"1px solid #ccc\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"200px\",\n          overflowY: \"scroll\",\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: messageInput,\n          onChange: e => setMessageInput(e.target.value),\n          style: {\n            flex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"VW18DI4w7C2Ueyc/Salo67N3jFA=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["axios","useEffect","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","serverUrl","ChatBot","roomName","participantName","_s","token","setToken","messageInput","setMessageInput","fetchToken","response","post","data","console","log","error","children","style","display","height","flexDirection","padding","borderTop","overflowY","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","flex","_c","$RefreshReg$"],"sources":["/home/nishanth/projects/livekit-demo/src/component/ChatBot.tsx"],"sourcesContent":["import { LiveKitRoom } from \"@livekit/components-react\";\nimport \"@livekit/components-styles\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport SendMessage from \"./SendMessage\";\n\n// const serverUrl = \"wss://randomroom-f0bn812z.livekit.cloud\";\nconst serverUrl = \"ws://192.168.0.41:7880\";\n\nfunction ChatBot({ roomName, participantName }: any) {\n  const [token, setToken] = useState(null);\n  // const room = RoomContext\n  // const roomRef = useRef < Room > new Room();\n  const [messageInput, setMessageInput] = useState(\"\");\n\n  useEffect(() => {\n    const fetchToken = async () => {\n      try {\n        const response = await axios.post(\n          \"http://192.168.0.41:3002/livekit/tokenGenerate\",\n          {\n            roomName,\n            participantName,\n          }\n        );\n        if (response.data.token) {\n          console.log(\"Token received:\", response.data.token);\n          setToken(response.data.token);\n        } else {\n          console.error(\n            \"Token response did not contain a token:\",\n            response.data\n          );\n        }\n      } catch (error) {\n        console.error(\"Error fetching token:\", error);\n      }\n    };\n\n    fetchToken();\n  }, [roomName, participantName]);\n\n  // useEffect(() => {\n  //   if (room) {\n  //     room.on(\"dataReceived\", (payload, participant) => {\n  //       const newMessage = {\n  //         sender: participant.identity,\n  //         content: new TextDecoder().decode(payload),\n  //       };\n  //       setMessages((prevMessages) => [...prevMessages, newMessage]);\n  //     });\n  //   }\n  // }, [room]);\n\n  // const handleSendMessage = () => {\n  //   console.log(room);\n  //   if (room && messageInput.trim()) {\n  //     try {\n  //       room.localParticipant.publishData(messageInput, \"message\");\n  //       setMessages((prevMessages) => [\n  //         ...prevMessages,\n  //         { sender: participantName, content: messageInput },\n  //       ]);\n  //       setMessageInput(\"\");\n  //     } catch (error) {\n  //       console.error(\"Error sending message:\", error);\n  //     }\n  //   }\n  // };\n\n  if(token) {\n    return <></>\n  } else {\n    return <>kuhiiugig</>\n  }\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", flexDirection: \"column\" }}>\n      {/* {token && (\n        <LiveKitRoom\n          video={false}\n          audio={false}\n          token={token}\n          connect={true}\n          serverUrl={serverUrl}\n          data-lk-theme=\"default\"\n          style={{ flex: 1 }}\n        >\n          <SendMessage />\n        </LiveKitRoom>\n      )} */}\n      <div style={{ padding: \"10px\", borderTop: \"1px solid #ccc\" }}>\n        <div\n          style={{ height: \"200px\", overflowY: \"scroll\", marginBottom: \"10px\" }}\n        >\n          {/* {messages.map((message, index) => (\n              <div key={index}>\n                <strong>{message.sender}:</strong> {message.content}\n              </div>\n            ))} */}\n        </div>\n        <div style={{ display: \"flex\" }}>\n          <input\n            type=\"text\"\n            value={messageInput}\n            onChange={(e) => setMessageInput(e.target.value)}\n            style={{ flex: 1 }}\n          />\n          {/* <button onClick={handleSendMessage}>Send</button> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}